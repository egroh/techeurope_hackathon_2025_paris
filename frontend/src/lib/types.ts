/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/examples/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Examples */
        get: operations["get_examples_examples__get"];
        put?: never;
        /** Create Example */
        post: operations["create_example_examples__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/examples/{example_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Example */
        get: operations["get_example_examples__example_id__get"];
        /** Update Example */
        put: operations["update_example_examples__example_id__put"];
        post?: never;
        /** Delete Example */
        delete: operations["delete_example_examples__example_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/support/ocr/parse-document": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Parse Document Endpoint
         * @description Upload a document (PDF, image) to extract text content using Mistral OCR.
         *     Returns a list of markdown strings, one for each page.
         */
        post: operations["parse_document_endpoint_support_ocr_parse_document_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/support/youtube/search-by-topics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search Youtube By Topics Endpoint
         * @description Search YouTube for videos based on a list of topics.
         */
        post: operations["search_youtube_by_topics_endpoint_support_youtube_search_by_topics_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_internal/message-schema": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** (internal) Message schema carrier */
        get: operations["_expose_message_schema__internal_message_schema_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Main */
        get: operations["main_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_parse_document_endpoint_support_ocr_parse_document_post */
        Body_parse_document_endpoint_support_ocr_parse_document_post: {
            /**
             * File
             * Format: binary
             * @description Document file (PDF, PNG, JPG, etc.) to be processed by OCR.
             */
            file: string;
            /**
             * Model
             * @description The Mistral OCR model to use.
             * @default mistral-ocr-latest
             */
            model: string | null;
            /**
             * Include Images
             * @description Whether to include base64 encoded images in the output (not typically used for markdown extraction).
             * @default false
             */
            include_images: boolean | null;
        };
        /** ExampleResponse */
        ExampleResponse: {
            /** Id */
            id: string;
            /** Name */
            name: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** OCRResponseModel */
        OCRResponseModel: {
            /** Pages */
            pages: string[];
            /** Message */
            message?: string | null;
        };
        /** OpenAIChatMessage */
        OpenAIChatMessage: {
            /** Id */
            id?: string;
            /** Conversation Id */
            conversation_id: string;
            /**
             * Type
             * @enum {string}
             */
            type: "human" | "ai" | "system" | "error" | "tool_request" | "tool_response";
            /** Content */
            content?: string | null;
            /** Tool Calls */
            tool_calls?: components["schemas"]["ToolCall"][] | null;
            /** Tool Call Id */
            tool_call_id?: string | null;
            /** Message Id */
            message_id?: string | null;
            /** Stream Event */
            stream_event?: ("start" | "chunk" | "end") | null;
            /** Isstreaming */
            isStreaming?: boolean | null;
            /** Isthinkingprocess */
            isThinkingProcess?: boolean | null;
        };
        /** PostExampleRequest */
        PostExampleRequest: {
            /** Name */
            name: string;
        };
        /** PutExampleRequest */
        PutExampleRequest: {
            /** Name */
            name: string;
        };
        /** ToolCall */
        ToolCall: {
            /** Id */
            id?: string;
            /**
             * Type
             * @default function
             * @constant
             */
            type: "function";
            /** Function */
            function: Record<string, never>;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** YouTubeSearchRequest */
        YouTubeSearchRequest: {
            /** Topics */
            topics: string[];
            /**
             * Videos Per Topic
             * @default 3
             */
            videos_per_topic: number | null;
        };
        /** YouTubeSearchResponse */
        YouTubeSearchResponse: {
            /** Results */
            results: {
                [key: string]: components["schemas"]["YouTubeVideo"][];
            };
            /** Message */
            message?: string | null;
        };
        /** YouTubeVideo */
        YouTubeVideo: {
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /** Channel */
            channel?: string | null;
            /** Published At */
            published_at?: string | null;
            /** Video Id */
            video_id: string;
            /**
             * Url
             * Format: uri
             */
            url: string;
            /** Thumbnail Url */
            thumbnail_url?: string | null;
            /** Views */
            views?: string | null;
            /** Likes */
            likes?: string | null;
            /** Duration */
            duration?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_examples_examples__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExampleResponse"][];
                };
            };
        };
    };
    create_example_examples__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostExampleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExampleResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_example_examples__example_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                example_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExampleResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_example_examples__example_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                example_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PutExampleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExampleResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_example_examples__example_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                example_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    parse_document_endpoint_support_ocr_parse_document_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_parse_document_endpoint_support_ocr_parse_document_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OCRResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_youtube_by_topics_endpoint_support_youtube_search_by_topics_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["YouTubeSearchRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["YouTubeSearchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    _expose_message_schema__internal_message_schema_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OpenAIChatMessage"];
                };
            };
        };
    };
    main_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
